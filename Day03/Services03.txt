一、检测教学环境Yum仓库
虚拟机A
[root@svr7 ~]# yum clean all
[root@svr7 ~]# yum repolist 
虚拟机B
[root@pc207 ~]# yum clean all
[root@pc207 ~]# yum repolist 

##################################################
在虚拟机A上搭建DNS服务器,负责解析sina.com
最终实现虚拟机A解析www.sina.com结果为192.168.4.10

######################################################
Split分离解析

什么是分离解析
• 当收到客户机的DNS查询请求的时候
– 能够区分客户机的来源地址
– 为不同类别的客户机提供不同的解析结果(IP地址)
– 为客户端提供最近的网络资源
   
	view "联通"  {
	match-clients { 来源地址1; .. ..; }
	zone "12306.cn" IN {
	...... 地址库1;
	}; };

	view "铁通"  {
	match-clients { 来源地址2; .. .. ; }
	zone "12306.cn" IN {
	...... 地址库2;
	}; };

####################################################

• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例
客户机来自 解析结果
  192.168.4.207--------->192.168.4.100
          其他地址 --------->1.2.3.4

注意事项：
   1.所有客户端都要找到自己的类别，分类要合理
   2.优先级由上及下匹配， 匹配及停止
   3.所有的zone必须都在view中

虚拟机A：
1.书写配置文件/etc/named.conf
	view "nsd" {                        #分类名称
 	 match-clients { 192.168.4.207; };  #匹配客户端来源IP地址
 	 zone "tedu.cn" IN {              #定义负责解析的区域
       	 type master;                #定义主DNS服务器
       	 file "tedu.cn.zone";        #地址库文件名称
 	};
	};
	view "other" {
 	 match-clients { any; };
  	 zone "tedu.cn" IN {
      	  type master;
       	  file "tedu.cn.other";
 	};
	};
2.建立两个地址库文件,写入不同解析结果,然后重起服务
[root@svr7 /]# vim /var/named/tedu.cn.zone 
	tedu.cn.  NS    svr7
	svr7      A     192.168.4.7
	www       A     192.168.4.100
[root@svr7 /]# vim /var/named/tedu.cn.other
	tedu.cn.  NS    svr7
	svr7      A     192.168.4.7
	www       A     1.2.3.4




##################################################
acl地址列表

  acl "liantong" {
    IP地址1; IP地址2; .. ..
      网段1; 网段2; .. ..
      .. ..
     };

1.书写配置文件/etc/named.conf
acl "test" { 192.168.4.207; 192.168.4.200;    
                      192.168.7.0/24; 192.168.1.0/24;                    
                      192.168.10.0/24; };

view "nsd" {
  match-clients { test; };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";
 };
};

###################################################
多区域的分离解析
注意事项：每一个view中，zone的个数要一致,zone的区域也要一致

  www.tedu.cn  192.168.4.207----》192.168.4.100
  www.tedu.cn  any----》1.2.3.4

  www.qq.com  192.168.4.207----》192.168.4.100
  www.qq.com  192.168.4.200----》11.12.13.14
  www.qq.com  any----》1.2.3.4


[root@svr7 /]# vim /etc/named.conf
options {
        directory       "/var/named";
 };
acl "test" {  192.168.4.207; };
view "nsd" {
  match-clients { test; };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";----》192.168.4.100
   };
  zone "qq.com" IN {
        type master;
        file "qq.com.zone";----》192.168.4.100
   };
 };
view "test" {
  match-clients { 192.168.4.200; };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.test";----》1.2.3.4
   };
  zone "qq.com" IN {
        type master;
        file "qq.com.test";----》11.12.13.14
   };
 };
view "other" {
  match-clients { any; };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.test";----》1.2.3.4
 };
  zone "qq.com" IN {
        type master;
        file "qq.com.other";----》1.2.3.4
 };
 };

################################################
RAID阵列概述
• 廉价冗余磁盘阵列
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同


• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少需要2块磁盘

• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少需要2块磁盘

• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少需要3块磁盘

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要4块磁盘

RAID0/1/10
• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少需要4块磁盘

• 硬RAID:由RAID控制卡管理阵列
– 主板 ---> 阵列卡---> 磁盘 ---> 操作系统--->  数据
• 软RAID:由操作系统来管理阵列
– 主板 --->  磁盘---> 操作系统--->  RAID软件--->  数据

###############################################
进程管理

    程序：静态的代码   仅占用磁盘存储

    进程：动态的代码   占用 CPU与内存

    唯一编号：PID

    父进程/子进程

查看进程树
• pstree — Processes Tree
– 格式:pstree [选项] [PID或用户名]

• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号

[root@svr7 /]# pstree

   systemd(上帝进程)

[root@svr7 /]# pstree  lisi
bash───vim
[root@svr7 /]# pstree  -p  lisi
bash(7653)───vim(7689)
[root@svr7 /]# pstree  -ap lisi
bash,7653
  └─vim,7689 a.txt
[root@svr7 /]# pstree  -ap

###########################################

• ps aux 操作
– 列出正在运行的所有进程

用户 进程ID %CPU %内存 虚拟内存 固定内存 终端 状态 起始时间 CPU时间 程序指令

• ps -elf 操作
– 列出正在运行的所有进程
  PPID:父进程的PID号

补充命令：
   统计文件的行数
[root@svr7 /]# wc -l /etc/passwd
[root@svr7 /]# find  /etc  -name  "*.conf"  |  wc -l
[root@svr7 /]# find  /etc  -name  "*tab"   |  wc -l
[root@svr7 /]# find  /etc  -name  "*tab"

[root@svr7 /]# ps aux  |  wc -l  #统计正在运行的进程有多少个

[root@svr7 /]# ps aux 

[root@svr7 /]# ps -elf 

#######################################################

进程动态排名
• top 交互式工具
– 格式:top   [-d 刷新秒数]   [-U 用户名]
   按键盘大写的P  进行CPU排序
   按键盘大写的M  进行内存排序

#####################################################
检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件

• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程
– -x:精确匹配完整的进程名

[root@svr7 /]# pgrep    cron
[root@svr7 /]# pgrep -l  cron
[root@svr7 /]# pgrep -l  a
[root@svr7 /]# pgrep -l  named 
[root@svr7 /]# pgrep -l  lib 


[root@svr7 /]# who    #查看当前登陆的用户信息
[root@svr7 /]# pgrep -lU lisi
[root@svr7 /]# pgrep -lU lisi -t pts/1
[root@svr7 /]# pgrep -lU lisi -t pts/2

######################################################

进程的前后台调度

• 后台启动
 – 在命令行末尾添加“&”符号,不占用当前终端


[root@svr7 /]# sleep  1000  &     #正在运行放入后台
[root@svr7 /]# jobs               #查看后台进程信息
[root@svr7 /]# sleep 800 
^Z                            #按Ctrl+Z暂停放入后台
[2]+  已停止               sleep 800
[root@svr7 /]# jobs 
[root@svr7 /]# bg 2       #将后台编号为2的进程，继续运行
[root@svr7 /]# jobs 
[root@svr7 /]# fg 2       #将后台编号为2的进程，恢复到前台运行
sleep 800
^C                        #按Ctrl+c结束进程
[root@svr7 /]# jobs 
[root@svr7 /]# fg 1       #将后台编号为1的进程，恢复到前台运行
sleep 1000 
^C                        #按Ctrl+c结束进程
[root@svr7 /]# jobs 
####################################################
杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 
– killall [-9] 进程名...
– pkill 查找条件


[root@svr7 /]# sleep 100 &
[root@svr7 /]# sleep 200 &
[root@svr7 /]# sleep 300 &

[root@svr7 /]# jobs -l
[root@svr7 /]# kill  8923
[root@svr7 /]# killall  sleep

[root@svr7 /]# jobs 
[root@svr7 /]# killall -9 sleep

################################################
杀死一个用户所有的进程（强制踢出一个用户）
[root@svr7 /]# killall -9 -u lisi

################################################
日志管理

日志的功能
• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的  依据


• 常见的日志文件

	/var/log/messages  记录内核消息、各种服务的公共消息
	/var/log/dmesg     记录系统启动过程的各种消息
	/var/log/cron      记录与cron计划任务相关的消息
	/var/log/maillog   记录邮件收发相关的消息
	/var/log/secure    记录与访问限制相关的安全消息

日志分析
• 通用分析工具
– tail、tailf、less、grep等文本浏览/检索命令
– awk、sed等格式化过滤工具

    tailf:实时跟踪日志消息

####################################################
用户登录分析
• users、who、w 命令
– 查看已登录的用户信息,详细度不同

• last、lastb 命令
– 查看最近登录成功/失败的用户信息

[root@svr7 /]#  users
[root@svr7 /]#  who
[root@svr7 /]#  w
[root@svr7 /]#  last -2   #查看最近登录成功
[root@svr7 /]#  lastb -2  #查看最近登录失败
###################################################
• Linux内核定义的事件紧急程度
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要

  0  EMERG（紧急）	   会导致主机系统不可用的情况
  1  ALERT（警告）	   必须马上采取措施解决的问题
  2  CRIT（严重）	    比较严重的情况
  3  ERR（错误）	    运行出现错误
  4  WARNING（提醒）    可能会影响系统功能的事件
  5  NOTICE（注意）      不会影响系统但值得注意
  6  INFO（信息）	     一般信息
  7  DEBUG（调试）	    程序或系统调试信息等

##################################################
使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志

• 常见用法
– journalctl | grep 关键词
– journalctl -u 服务名    [-p 优先级]
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --until="yyyy-mm-dd HH:MM:SS"

[root@svr7 /]# yum -y install httpd
[root@svr7 /]# systemctl restart httpd
[root@svr7 /]# journalctl -u httpd
[root@svr7 /]# journalctl -u named

######################################################
systemctl控制


• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合


systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖
– 配置目录:/etc/systemd/system/
– 服务目录:/lib/systemd/system/
– 主要管理工具:systemctl

管理众多服务

# systemctl start 服务名      #开启服务
# systemctl stop 服务名        #关闭服务
# systemctl restart 服务名   #重起服务
# systemctl status 服务名     #查看服务状态

# systemctl enable 服务名     #设置服务开机自起
# systemctl disable 服务名    #设置服务禁止开机自起

#####################################################

RHEL6：运行级别     数据中心（IDC）   300
          
        0：关机       0个服务
	1：单用户模式（修复模式  破解密码模式） 50个服务
	2：字符界面（不支持网络） 100个服务
	3：字符界面（支持网络） 150个服务
	4：未定义
	5：图形界面    260个服务
	6：重起    0个服务
  
   切换运行级别的命令：init


RHEL7:运行模式

   graphical.target :图形模式
   multi-user.target：字符模式

当前直接切换
[root@svr7 /]# systemctl isolate graphical.target 
[root@svr7 /]# systemctl isolate multi-user.target

修改永久的默认模式
[root@svr7 /]# systemctl get-default 
multi-user.target
[root@svr7 /]# systemctl set-default graphical.target 
[root@svr7 /]# systemctl get-default 

[root@svr7 /]# reboot 

######################################################

















